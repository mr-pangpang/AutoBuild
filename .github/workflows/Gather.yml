name: Auto-Sync TV Source to Second Repo
on:
  workflow_dispatch:
  schedule:
    - cron: '0 13 * * *'

jobs:
  sync-tv:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout First Repo
        uses: actions/checkout@v4
        with:
          repository: mr-pangpang/AutoBuild
          fetch-depth: 1
          quiet: true

      - name: Download TV.txt
        id: download
        run: |
          mkdir -p ./temp && chmod 755 ./temp
          curl -sSL --retry 5 --retry-delay 2 --connect-timeout 10 \
            -o ./temp/tv.txt "http://123.56.43.183/tv/TV.txt"
          if [ ! -f ./temp/tv.txt ] || [ $(stat -c %s ./temp/tv.txt) -lt 100 ]; then
            echo "::error title=Download Failed::TV.txt is missing or too small (invalid)"
            exit 1
          fi
          echo "file_size=$(du -sh ./temp/tv.txt | awk '{print $1}')" >> $GITHUB_OUTPUT
          echo "‚úÖ Downloaded valid TV.txt (size: ${{ steps.download.outputs.file_size }})"

      - name: Push to Second Repo (dpdisk/file)
        env:
          TOKEN: ${{ secrets.PANGPANG }}
          REPO_URL: "github.com/dpdisk/file.git"
          BRANCH: "main"
        run: |
          git config --global user.name "Actions-Sync"
          git config --global user.email "actions@github.com"
          git clone "https://$TOKEN@$REPO_URL" ./second-repo --quiet
          [ $? -ne 0 ] && { echo "::error title=Clone Failed::Repository not found or token invalid"; exit 1; }
          
          cd ./second-repo
          rm -f tv.txt
          cp ../temp/tv.txt ./tv.txt
          [ ! -f tv.txt ] && { echo "::error title=Copy Failed::tv.txt missing after copy"; exit 1; }
          
          git add tv.txt
          git diff --cached --quiet && { echo "‚ÑπÔ∏è No changes to tv.txt, skip push"; exit 0; }
          git commit -m "Auto-sync TV source ($(date +'%Y-%m-%d'))" --quiet
          git push origin $BRANCH --quiet
          
          [ $? -eq 0 ] && echo "‚úÖ Pushed to $REPO_URL (branch: $BRANCH)" || { echo "::error title=Push Failed::Permission denied or branch error"; exit 1; }

      - name: Clean Temporary Files
        if: success()
        run: |
          rm -rf ./temp ./second-repo
          echo "üßπ Cleaned temporary files"

      - name: Sync Summary
        if: always()
        run: |
          echo "==================== Sync Result ===================="
          if [ "${{ job.status }}" = "success" ]; then
            echo "‚úÖ All steps completed: TV.txt (size: ${{ steps.download.outputs.file_size }}) synced to second repo"
          else
            echo "‚ùå Sync failed: Check previous steps for errors (e.g., download/clone/push)"
          fi
          echo "======================================================"
