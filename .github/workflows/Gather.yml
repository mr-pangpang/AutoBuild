name: Gather TV Source & Push to Second Repo
on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 8 * * *'  # 北京时间每日8点自动运行（可选）

jobs:
  sync-tv-source:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      # 步骤1：拉取第一仓库代码（无依赖可删除）
      - name: Checkout First Repo Code
        uses: actions/checkout@v4
        with:
          repository: mr-pangpang/AutoBuild
          fetch-depth: 1

      # 步骤2：安装依赖（确保curl可用）
      - name: Install Dependencies
        run: sudo apt update && sudo apt install -y curl

      # 步骤3：下载TV.txt（增加下载失败重试+文件大小检查）
      - name: Download TV.txt from Source URL
        run: |
          mkdir -p ./temp  # 确保临时目录存在
          # 3次重试下载，避免网络波动
          curl -sSL --retry 3 --output ./temp/tv.txt "http://123.56.43.183/tv/TV.txt"
          # 检查文件是否存在且非空
          if [ ! -f ./temp/tv.txt ]; then
            echo "Error: TV.txt not found after download"
            exit 1
          fi
          if [ $(stat -c %s ./temp/tv.txt) -eq 0 ]; then
            echo "Error: TV.txt is empty"
            exit 1
          fi
          echo "✅ TV.txt downloaded successfully (size: $(du -sh ./temp/tv.txt | awk '{print $1}'))"

      # 步骤4：推送文件到第二仓库（增加路径检查+强制提交）
      - name: Push TV.txt to Second Repository (dpdisk/file)
        env:
          SECOND_REPO_TOKEN: ${{ secrets.PANGPANG }}
          SECOND_REPO_URL: "https://github.com/dpdisk/file.git"
          SECOND_REPO_BRANCH: "main"  # 若第二仓库分支是master，改为master
        run: |
          # 配置Git身份
          git config --global user.name "GitHub Actions (AutoSync)"
          git config --global user.email "actions-auto-sync@example.com"

          # 克隆第二仓库（带Token授权）
          echo "🔍 Cloning second repository: $SECOND_REPO_URL"
          git clone "https://${SECOND_REPO_TOKEN}@${SECOND_REPO_URL#https://}" ./second-repo
          if [ $? -ne 0 ]; then
            echo "Error: Failed to clone second repository"
            exit 1
          fi

          # 进入第二仓库目录，检查并复制文件
          cd ./second-repo
          echo "📂 Current files in second repo: $(ls -l)"
          
          # 检查源文件是否存在，再复制
          if [ ! -f ../temp/tv.txt ]; then
            echo "Error: Source file ../temp/tv.txt missing"
            exit 1
          fi
          rm -f tv.txt  # 删除旧文件（若存在）
          cp ../temp/tv.txt ./tv.txt  # 复制新文件
          
          # 验证复制结果
          if [ ! -f tv.txt ]; then
            echo "Error: Failed to copy tv.txt to second repo"
            exit 1
          else
            echo "✅ tv.txt copied to second repo (size: $(du -sh tv.txt | awk '{print $1}'))"
          fi

          # 强制提交（跳过变更检查，确保首次推送成功）
          git add tv.txt
          # 处理空提交（若文件无变更，避免报错）
          if git diff --cached --quiet; then
            echo "ℹ️ tv.txt content unchanged, no push needed"
            exit 0
          fi
          git commit -m "Auto-Sync: Update TV source ($(date +'%Y-%m-%d %H:%M:%S'))"
          echo "🚀 Pushing to $SECOND_REPO_BRANCH branch..."
          git push origin $SECOND_REPO_BRANCH
          
          # 验证推送结果
          if [ $? -eq 0 ]; then
            echo "✅ Success: tv.txt pushed to second repository"
          else
            echo "Error: Failed to push to second repository"
            exit 1
          fi

      # 步骤5：清理临时文件
      - name: Clean Up
        if: always()
        run: rm -rf ./temp ./second-repo
        echo "🧹 Temporary files cleaned up"
